package com.shr25.robot.utils;import com.alibaba.fastjson.JSONObject;import com.shr25.robot.qq.conf.QqConfig;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.*;import java.net.HttpURLConnection;import java.net.URL;import java.nio.charset.StandardCharsets;import java.util.HashMap;import java.util.Locale;import java.util.Map;public class IOUtil {    private static Logger logger = LoggerFactory.getLogger(IOUtil.class);    /**     * 爬虫抓取链接超时时间，单位：毫秒     */    public static final int SPIDER_TIMEOUT = 10000;    public static final Map<String, String> map = new HashMap<>();    public static final String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35";    static {        map.put("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36 Edg/83.0.478.50");        map.put("cookie", "BDUSS=FlzTi1tUTdDbkdaazdaQ35ZUC0wWC1DQVZhVE11bGtSSnZVUEVOTktiaEF0MmxrSVFBQUFBJCQAAAAAAAAAAAEAAAAW9X831PXN~c~rzfLW2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAqQmRAKkJkZ; BDUSS_BFESS=FlzTi1tUTdDbkdaazdaQ35ZUC0wWC1DQVZhVE11bGtSSnZVUEVOTktiaEF0MmxrSVFBQUFBJCQAAAAAAAAAAAEAAAAW9X831PXN~c~rzfLW2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAqQmRAKkJkZ; BIDUPSID=D1024E16C764EFA4BBC62CDC6722E931; PSTM=1682321591; BAIDUID=B61CF78C84C186B5E9973DFF533BF236:FG=1; MCITY=-257%3A; BAIDUID_BFESS=B61CF78C84C186B5E9973DFF533BF236:FG=1; ZFY=QlxaloVf9oUKWxmb54vbxPLGHSZm4rR:B1tfuqDucFKk:C; __bid_n=1876a541bb950982184207; ariaDefaultTheme=undefined; BAIDU_WISE_UID=wapp_1686110042991_65; zhishiTopicRequestTime=1686536740997; baikeVisitId=6512a2b2-1304-4a37-9588-c91ea44a44ed; X_ST_FLOW=0; Hm_lvt_55b574651fcae74b0a9f1cf9c8d7c93a=1685600118,1685676760,1686272777,1686536757; FPTOKEN=CrIRTTfU3G5DDbb0SVFeW/1HGRRcraiTEkb2F2pfpYq0Ys1o/EPg2vKNGIrHxx3xBlrbFeEWw8Xj5N/gq+24F/5j6NCOzLG4t86EUk+yJyVOgPJc0silbR7GRhUNr9brISzB+cBPHNo7oKOQpLbO9pIQogSoWabXKIGCvWRtg1U1R/2RMQ9kkKZZbPcd3ZnOsSqwImVXyJsXTUqBdmth/jmZe8JvrfRjUBvF9mnrtZpdXVdw5WQFukUeM/eADUhcyuPjXSt+bFnkV8F7wur1kqRTBVMIJooAQwlDeS4P791c+DUGXxF9yaXXvlw3jAD9h6NcHGvwyNVwxRmHNM/P6wKtUKf9G48yy03303x7Tl5gjlIEF2KA9SIMyohx35BLhpL76c2IdLXnuPEPdNbJgw==|xW4gEfxxY/3wXM7z6aSoSlODw8ZMIgo3NNk2OAPmVaY=|10|c5ccc6091d91c1a4118e382ad36aef64; BK_SEARCHLOG=%7B%22key%22%3A%5B%22%E7%81%AB%E5%BD%B1%E5%BF%8D%E8%80%85%22%5D%7D; Hm_lpvt_55b574651fcae74b0a9f1cf9c8d7c93a=1686536846; RT=\"z=1&dm=baidu.com&si=8c16bf92-b08b-40cf-98fc-441e52a522cb&ss=lis8fga5&sl=b&tt=d45&bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf\"; ab_sr=1.0.1_MTg5NmY2ZGEzNjNhZGI5OTYwNWY2MjEwMjQyNTg5ZDExM2U1YzUyNzgyMzcxZDNmZmI1ZTk3NDI0Zjk5NDg0ODNiMzgyY2M0OTYwYWZkZDg3NThjZjY3OGJiNWYzNmRkY2RiYzc5MDEwNjM5MWIzMWQ5OGM3ZTFkODZkODI5NTlmZTM5MTI0OGQxYWMxMTg0YjI4ZGE2OGMwZWExZGQyMDI4MTU3NGFjZjVmYjk5Yzk4YzI1NTJhNjc2YjUyZjZi");        map.put("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9");    }    private static HttpURLConnection getUrlConnection(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        HttpURLConnection conn = (HttpURLConnection) obj.openConnection();        conn.setRequestMethod(method.toUpperCase(Locale.ROOT));        conn.setRequestProperty("Connection", "keep-Alive");        conn.setRequestProperty("Content-Type", "application/json");        conn.setRequestProperty("User-Agent", USER_AGENT);        if (heads == null) {            heads = map;        }        for (Map.Entry<String, String> it : heads.entrySet()) {            conn.setRequestProperty(it.getKey(), it.getValue());        }        conn.setInstanceFollowRedirects(true);        if (timeout > 0) {            conn.setConnectTimeout((int) timeout);        }        conn.setDoOutput(true);        conn.setDoInput(true);        conn.connect();        if (postParam != null) {            OutputStream out = conn.getOutputStream();            out.write(postParam.getBytes());            out.flush();        }        return conn;    }    /**     * 发送 http 请求并获取回复信息，注意回复格式必须是 json，否则该函数无法正常工作     *     * @param obj       URL     * @param method     * @param heads     * @param postParam body 参数，若无可填 null     * @return JSON 对应的 map 对象     * @throws IOException     */    public static Map<String, Object> sendAndGetResponseMap(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        try {            HttpURLConnection conn = getUrlConnection(obj, method, heads, postParam, timeout);            int code = conn.getResponseCode();            StringBuilder msg = new StringBuilder();            try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"))) {                String line = null;                while ((line = reader.readLine()) != null) {                    msg.append(line).append("\n");                }            } catch (Exception e) {                e.printStackTrace();            } finally {                conn.disconnect();            }            Map map = JSONObject.parseObject(msg.toString(), Map.class);            map.put("code", code);            return map;        } catch (Exception e) {            throw e;        }    }    /**     * 发送 http 请求并获取回复信息，注意回复格式必须是 json，否则该函数无法正常工作，默认的超时时间为配置所指定的     *     * @param obj       URL     * @param method     * @param heads     * @param postParam body 参数，若无可填 null     * @return JSON 对应的 map 对象     * @throws IOException     */    public static Map<String, Object> sendAndGetResponseMap(URL obj, String method, Map<String, String> heads, String postParam) throws IOException {        return sendAndGetResponseMap(obj, method, heads, postParam, QqConfig.timeout);    }    /**     * 发送 http 请求并获取回复信息，注意回复格式必须是 json，否则该函数无法正常工作，默认的超时时间为配置所指定的     *     * @param obj       URL     * @param method     * @param heads     * @param postParam body 参数，若无可填 null     * @return JSON 对应的 map getter 对象     * @throws IOException     */    public static MapGetter sendAndGetResponseMapGetter(URL obj, String method, Map<String, String> heads, String postParam) throws IOException {        return new MapGetter(sendAndGetResponseMap(obj, method, heads, postParam, QqConfig.timeout));    }    /**     * 发送 http 请求并获取回复信息，注意回复格式为原始二进制流     *     * @param obj       URL     * @param method     * @param heads     * @param postParam body 参数，若无可填 null     * @return InputStream     * @throws IOException     */    public static InputStream sendAndGetResponseStream(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        try {            HttpURLConnection conn = getUrlConnection(obj, method, heads, postParam, timeout);            return conn.getInputStream();        } catch (Exception e) {            throw e;        }    }    /**     * 发送 http 请求并获取回复信息，注意回复格式为原始二进制流，默认的超时时间为配置所指定的     *     * @param obj       URL     * @param method     * @param heads     * @param postParam body 参数，若无可填 null     * @return InputStream     * @throws IOException     */    public static InputStream sendAndGetResponseStream(URL obj, String method, Map<String, String> heads, String postParam) throws IOException {        return sendAndGetResponseStream(obj, method, heads, postParam, QqConfig.timeout);    }    /**     * 发送 http 请求并获取回复信息，返回类型为 String 类型     *     * @param obj       URL     * @param method     * @param heads     * @param postParam body 参数，若无可填 null     * @return String     * @throws IOException     */    public static String sendAndGetResponseString(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        HttpURLConnection conn = getUrlConnection(obj, method, heads, postParam, timeout);        StringBuilder msg = new StringBuilder();        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {            String line = null;            while ((line = reader.readLine()) != null) {                msg.append(line).append("\n");            }        } finally {            conn.disconnect();        }//        logger.debug("Send request to " + obj + " and get response " + msg);        return msg.toString();    }    /**     * 发送 http 请求并获取回复信息，返回类型为 String 类型，默认的超时时间为配置所指定的     *     * @param obj       URL     * @param method     * @param heads     * @param postParam body 参数，若无可填 null     * @return String     * @throws IOException     */    public static String sendAndGetResponseString(URL obj, String method, Map<String, String> heads, String postParam) throws IOException {        return sendAndGetResponseString(obj, method, heads, postParam, QqConfig.timeout);    }    /**     * 写入 string 内容到文件中，此方法将追加写     *     * @param file     * @param message     * @throws FileNotFoundException     */    public synchronized static void writeToFile(File file, String message) throws FileNotFoundException {        writeToFile(file, message, true);    }    /**     * 写入 string 内容到文件中     *     * @param file     * @param message     * @throws FileNotFoundException     */    public synchronized static void writeToFile(File file, String message, boolean append) throws FileNotFoundException {        try (FileOutputStream out = new FileOutputStream(file, append)) {            out.write(message.getBytes());        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * 写入 字节流 内容到文件中     *     * @param file     * @param in     * @throws FileNotFoundException     */    public synchronized static void writeToFile(File file, InputStream in) throws FileNotFoundException {        try (FileOutputStream out = new FileOutputStream(file, true)) {            int b;            while ((b = in.read()) != -1) {                out.write(b);            }        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * 读取文件，返回字符串     *     * @param file     * @throws FileNotFoundException     */    public synchronized static String readFromFile(File file) {        try (FileInputStream in = new FileInputStream(file)) {            BufferedReader reader = new BufferedReader(new InputStreamReader(in));            StringBuilder msg = new StringBuilder();            String line = null;            while ((line = reader.readLine()) != null) {                msg.append(line).append("\n");            }            return msg.toString();        } catch (IOException e) {            e.printStackTrace();        }        return null;    }    public synchronized static void replaceFile(File file, String seq, String target) throws FileNotFoundException {        String content = readFromFile(file);        assert content != null;        writeToFile(file, content.replaceAll(seq, target), false);    }    public static Document getByJsoup(String url) throws IOException {        return Jsoup.connect(url).userAgent(USER_AGENT).headers(map).timeout(SPIDER_TIMEOUT).get();    }}